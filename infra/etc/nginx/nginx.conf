user www-data;
worker_processes  auto;
worker_rlimit_nofile 262140;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 65535;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    log_format kataribe '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_time';

    access_log  /var/log/nginx/access.log kataribe;
    #access_log off;

    keepalive_timeout 120;
    client_max_body_size 10m;
    #proxy_request_buffering on;
    #client_body_buffer_size 2048k;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    aio threads;
    open_file_cache max=1024 inactive=65s;
    open_file_cache_errors on;
    server_tokens off;

    gzip  off;
    #gzip  on;
    gzip_vary on;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript application/xml application/xml+rss;
    #gzip_static on;

    geo $dollar {
        default "$";
    }

    upstream buy {
        server 172.24.97.248;
    }

    server {
        # TLS, HTTP/2
        listen 443 ssl http2;
        #listen 80;

        ssl_session_cache shared:SSL:5m;
        ssl_session_timeout 5m;
        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1.2;

        # HTTP/2 で利用可能なCipherの中から速さ優先で選択
        # $ openssl ciphers -v 'ECDHE+AESGCM:-AES256'
        # ECDHE-RSA-AES128-GCM-SHA256   TLSv1.2 Kx=ECDH Au=RSA   Enc=AESGCM(128) Mac=AEAD
        # ECDHE-ECDSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH Au=ECDSA Enc=AESGCM(128) Mac=AEAD
        # AES-NIが利用可能ならAESを利用したほうが早い
        # HTTP/2はGCMを要求する https://tools.ietf.org/html/rfc7540
        ssl_ciphers ECDHE+AESGCM:-AES256;

        #ssl_certificate /etc/nginx/server.crt;
        #ssl_certificate_key /etc/nginx/server.key;
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        # sudo openssl dhparam -out /etc/nginx/dhparam.pem 2048
        ssl_dhparam /etc/nginx/dhparam.pem;

        root /home/isucon/isucari/webapp/public;

        location / {
            if (!-f $request_filename) {
              rewrite ^(.+)$ /index.php$1 last;
            }
            add_header Cache-Control "public";
            #access_log off;
            expires 24h;
        }

        location /buy {
            proxy_pass http://buy;
            proxy_set_header Host $host;
        }

        ## fpm
        location ~ [^/]\.php(/|$) {
            root           /home/isucon/isucari/webapp/php/public;
            include        fastcgi_params;
            fastcgi_pass   unix:/var/248/php-fpm.sock;
            #fastcgi_pass   127.0.0.1:9000;

            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param  SCRIPT_NAME     $fastcgi_script_name;

            # 直接フルパスを書いても良い
            #fastcgi_param  SCRIPT_FILENAME  /path/to/script.php
        }

        #location /favicon.ico {
        #    add_header Cache-Control "public";
        #    access_log off;
        #    expires 24h;
        #}

        # location = /unko.php {
        #    include        fastcgi_params;
        #    fastcgi_pass   unix:/run/php/php-fpm.sock;
        #    fastcgi_param  SCRIPT_NAME     $fastcgi_script_name;
        #    fastcgi_param  SCRIPT_FILENAME  /home/isucon/isubata/webapp/php/unko.php;
        #}

        #location = a {
        #  # cookieをsetできる
        #  add_header Set-Cookie hoge=;
        #
        #  # query parameterに応じてなんかさせる
        #  if ($arg_hoge = 'a') {
        #    # argument name in the request line
        #  }
        #
        #  # cookieの中身に応じてなんかさせる
        #  if ($cookie_hoge = 'a') {
        #    # the name cookie
        #  }

        # アレな感じに直接中身を書いても良い
        #default_type text/html;
        #return 200 '<!DOCTYPE html>
#<html>
#</html>
#';
        #}

        # アレ
        #location = /favicon.ico {
        #  access_log off;
        #  return 404;
        #  break;
        #}

        #error_page  404              /404.html;
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #  root   /usr/share/nginx/html;

    }

}

